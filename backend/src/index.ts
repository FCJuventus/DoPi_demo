import fs from 'fs';
import path from 'path';
import cors from 'cors';
import express from 'express';
import cookieParser from 'cookie-parser';
import session from 'express-session';
import logger from 'morgan';
import MongoStore from 'connect-mongo';
import { MongoClient } from 'mongodb';
import env from './environments';
import mountPaymentsEndpoints from './handlers/payments';
import mountUserEndpoints from './handlers/users';
import mountJobsEndpoints from './handlers/jobs';

// –¢–∏–ø—ã –¥–ª—è session (–∫–∞–∫ —É —Ç–µ–±—è –∏ –±—ã–ª–æ)
import "./types/session";

// ---------- MongoDB ----------

const dbName = env.mongo_db_name;

// 1) –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º –ø–æ–ª–Ω—ã–π SRV-URI –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è Atlas)
const mongoUri =
  process.env.MONGODB_URI ||
  `mongodb+srv://${encodeURIComponent(env.mongo_user)}:${encodeURIComponent(
    env.mongo_password
  )}@${env.mongo_host}/${dbName}?retryWrites=true&w=majority`;

// –î–ª—è SRV-—Å—Ç—Ä–æ–∫–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω—É–∂–Ω—ã ‚Äî –≤—Å—ë –≤ URI
const mongoClientOptions = {}; // –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–º

// ---------- Express App –∏ –º–∏–¥–ª–≤–∞—Ä—ã ----------

const app: express.Application = express();

// –°–æ–∑–¥–∞–¥–∏–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏
try {
  fs.mkdirSync(path.join(__dirname, '..', 'log'), { recursive: true });
} catch { /* noop */ }

// –ö–æ—Ä–æ—Ç–∫–∏–π –ª–æ–≥ –≤ –∫–æ–Ω—Å–æ–ª—å
app.use(logger('dev'));

// –ü–æ–ª–Ω—ã–π –ª–æ–≥ –≤ —Ñ–∞–π–ª
app.use(logger('common', {
  stream: fs.createWriteStream(path.join(__dirname, '..', 'log', 'access.log'), { flags: 'a' }),
}));

// –ü–æ–∑–≤–æ–ª—è–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å —Å JSON
app.use(express.json());

// --- CORS: —Ä–∞–∑—Ä–µ—à–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ ---
const allowedOrigins = [
  env.frontend_url,                      // —Ç–≤–æ–π –ø—Ä–æ–¥ –Ω–∞ Render –∏–∑ ENV
  'https://dopi-frontend.onrender.com', // —è–≤–Ω—ã–π –ø—Ä–æ–¥-URL
  // ‚Üì –ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –¥–æ–±–∞–≤–∏—à—å PiNet —Å—É–±–¥–æ–º–µ–Ω –≤ Dev Portal, –≤—Å—Ç–∞–≤—å –µ–≥–æ —Å—é–¥–∞:
  // 'https://<—Ç–≤–æ–π-–ø–æ–¥–¥–æ–º–µ–Ω>.pinet.org'  // –ø—Ä–∏–º–µ—Ä, –∑–∞–º–µ–Ω–∏ –Ω–∞ —Ç–æ—á–Ω—ã–π
];

app.use(cors({
  origin: (origin, cb) => {
    // –†–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –±–µ–∑ Origin (–Ω–∞–ø—Ä–∏–º–µ—Ä, curl) –∏ –∏–∑ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞
    if (!origin || allowedOrigins.includes(origin)) return cb(null, true);
    return cb(new Error('CORS blocked: ' + origin));
  },
  credentials: true
}));
// Cookies
app.use(cookieParser());

// Render —Å–∏–¥–∏—Ç –∑–∞ –ø—Ä–æ–∫—Å–∏ ‚Üí –±–µ–∑ —ç—Ç–æ–≥–æ secure cookie –Ω–µ –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å
app.set('trust proxy', 1);

// –°–µ—Å—Å–∏–∏ (—Ö—Ä–∞–Ω–∏–º –≤ MongoDB)
app.use(session({
  secret: env.session_secret,
  resave: false,
  saveUninitialized: false,
  store: MongoStore.create({
    mongoUrl: mongoUri,
    dbName: dbName,
    collectionName: 'user_sessions'
  }),
  cookie: process.env.NODE_ENV === 'production'
    ? { sameSite: 'none', secure: true }
    : { sameSite: 'lax', secure: false }
}));

// ---------- –†–æ—É—Ç—ã ----------

// –ü–ª–∞—Ç–µ–∂–∏
const paymentsRouter = express.Router();
mountPaymentsEndpoints(paymentsRouter);
app.use('/payments', paymentsRouter);

// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–≤—Ö–æ–¥/–≤—ã—Ö–æ–¥)
const userRouter = express.Router();
mountUserEndpoints(userRouter);
app.use('/user', userRouter);

// ...
const apiRouter = express.Router();
app.use('/api', apiRouter);

const jobsRouter = express.Router();
mountJobsEndpoints(jobsRouter);
apiRouter.use('/jobs', jobsRouter);

// –ü—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ—Ä–µ–Ω—å (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏)
app.get('/', async (_, res) => {
  res.status(200).send({ message: "Hello, World!" });
});

// Health-check (Render –±—É–¥–µ—Ç —Å—Ç—É—á–∞—Ç—å—Å—è —Å—é–¥–∞)
app.get('/healthz', (_, res) => {
  res.status(200).json({ status: 'ok' });
});

// ---------- –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ ----------

const PORT = Number(process.env.PORT) || 8000;

app.listen(PORT, async () => {
  try {
    const client = await MongoClient.connect(mongoUri, {
      serverSelectionTimeoutMS: 20000, // –∂–¥—ë–º –¥–æ–ª—å—à–µ, —á—Ç–æ–±—ã Atlas —É—Å–ø–µ–ª –æ—Ç–≤–µ—Ç–∏—Ç—å
      tls: true                       // —è–≤–Ω–æ –≤–∫–ª—é—á–∞–µ–º TLS
    });

    const db = client.db(dbName);
    app.locals.env = env;
    app.locals.orderCollection = db.collection('orders');
    app.locals.userCollection = db.collection('users');
    app.locals.jobCollection = db.collection('jobs');

// –∏–Ω–¥–µ–∫—Å—ã –Ω–∞ —Å—Ç–∞—Ä—Ç–µ (–æ–¥–∏–Ω —Ä–∞–∑ —Å–æ–∑–¥–∞—Å—Ç—Å—è, –¥–∞–ª—å—à–µ –±—É–¥–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å)
await app.locals.jobCollection.createIndex({ status: 1, createdAt: -1 });
await app.locals.jobCollection.createIndex({ creatorUid: 1, createdAt: -1 });
await app.locals.jobCollection.createIndex({ freelancerUid: 1, createdAt: -1 });

    // üîí –õ–æ–≥–∏—Ä—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ (–±–µ–∑ –ø–∞—Ä–æ–ª—è)
    const safeUri = mongoUri.replace(/:\/\/(.*)@/, '://***:***@');
    console.log('Connected to MongoDB on:', safeUri);

  } catch (err) {
    console.error('Connection to MongoDB failed:', err);
  }

  console.log(`App platform demo app - Backend listening on port ${PORT}!`);
  console.log(`CORS config: configured to respond to a frontend hosted on ${env.frontend_url}`);
});
